#! /usr/bin/env python3
#################################################################
# Guillaume W. Bres, 2022          <guillaume.bressaix@gmail.com>
#################################################################
# status.py
# small script to quickly monitor an AD9547,48 
#################################################################
import sys
import math
import argparse
from smbus import SMBus
from pprint import pprint

def read_data (handle, dev, addr):
    msb = (addr & 0xFF00)>>8
    lsb = addr & 0xFF
    handle.write_i2c_block_data(dev, msb, [lsb])
    data = handle.read_byte(dev)
    return data
def bitfield (data, mask):
    return int((data & mask) >> int(math.log2(mask))) 
def read_reg (handle, dev, status, reg, addr, bitfields):
    if not reg in status:
        status[reg] = {}
    data = read_data(handle, dev, addr)
    for b in bitfields:
        status[reg][b[0]] = bitfield(data, b[1])

def main (argv):
    parser = argparse.ArgumentParser(description="AD9547/48 status reporting")
    parser.add_argument(
        "bus",
        help="I2C bus",
    )
    parser.add_argument(
        "address",
        help="I2C slv address",
    )
    flags = [
        ("info",    "Device general infos (SN#, ..)"),
        ("serial",  "Serial port status (I2C/SPI)"),
        ("sysclk",  "Sys clock (pll and other infos)"),
        ("dpll",    "Digital pll status"),
        ("input",   "Input ref. status"),
        ('tuning',  "Current DDS freq. tuning word generated by history logic"),
        ("mx-pins", "Mx programmable pins infos"),
        ("irq",     "IRQ status"),
        ("watchdog","Watchdog timer current reading"),
    ]
    for (flag, helper) in flags:
        _helper = helper if helper is not None else "Report {} Status".format(flag.upper())
        parser.add_argument(
            "--{}".format(flag), 
            action="store_true",
            help=_helper,
        )
    args = parser.parse_args(argv)

    # open device
    handle = SMBus()
    handle.open(int(args.bus))
    address = int(args.address, 16)

    status = {}
    if args.info:
        status['info'] = {}
        status['info']['rev'] = hex(read_data(handle, address, 0x0002))
        status['info']['id']  = hex(read_data(handle, address, 0x0003))
    if args.serial:
        status['serial'] = {}
        status['serial']['buffered'] = read_data(handle, address, 0x0004) & 0x01
    if args.tuning:
        tuning = read_data(handle, address, 0x0D14)
        tuning += read_data(handle, address, 0x0D15) << 8
        tuning += read_data(handle, address, 0x0D16) << 16
        tuning += read_data(handle, address, 0x0D17) << 24
        tuning += read_data(handle, address, 0x0D18) << 32
        tuning += read_data(handle, address, 0x0D19) << 40
        status['tuning'] = tuning  
    if args.sysclk:
        status['sysclk'] = {}
        status['sysclk']['feedback-n-div'] = read_data(handle, address, 0x0101) & 0x0F 
        data = read_data(handle, address, 0x0100)
        status['sysclk']['ext-loop-filter'] = (data & 0x80)>>7
        status['sysclk']['manual-charge-pump'] = (data & 0x40)>>6
        status['sysclk']['charge-pump-current'] = (data & 0x18)>>3
        status['sysclk']['lock-detect-tim-enabled'] = not(bool((data & 0x04)>>2))
        depth = data & 0x03
        if depth == 0:
            depth = 128
        elif depth == 1:
            depth = 256
        elif depth == 2:
            depth = 512
        elif depth == 3:
            depth = 1024
        status['sysclk']['lock-detect-tim-depth'] = depth
        data = read_data(handle, address, 0x0102)
        source = data & 0x03
        if source == 0:
            source = "crystal"
        if source == 1:
            source = "direct-low-freq"
        if source == 2:
            source = "direct-low-freq"
        if source == 3:
            source = "input-power-down"
        status['sysclk']['source'] = source
        status['sysclk']['pll-enable'] = bool((data & 0x04)>>2)
        status['sysclk']['x2-multiplier'] = bool((data & 0x08)>>3)
        status['sysclk']['m-div'] = (data & 0x30)>>4
        status['sysclk']['m-div-reset'] = bool((data & 0x40)>>6)
        period = read_data(handle, address, 0x0103)
        period += read_data(handle, address, 0x0104) << 8
        period += (read_data(handle, address, 0x0105) & 0x0F) << 16
        status['sysclk']['period'] = period
        period = read_data(handle, address, 0x0106)
        period += read_data(handle, address, 0x0107) << 8
        period += (read_data(handle, address, 0x0108) & 0x0F) << 16
        status['sysclk']['stab-period'] = period
        bitfields = [
            ('stable', 0x10),
            ('calibrating', 0x02),
            ('locked', 0x01),
        ]
        read_reg(handle, addres, status, 'sysclk', 0x0D01, bitfields)
    if args.mx_pin: 
        base = 0x0200
        status['mx-pin'] = {}
        for i in range (8):
            data = read_data(handle, address, base) 
            status['mx-pin']['m{}-output'.format(i)] = (data & 0x80)>>7
            status['mx-pin']['m{}-function'.format(i)] = data & 0x7F
            base += 1
    if args.dpll:
        bitfields = [
            ('offset-slew-limiting', 0x80),
            ('phase-buildout', 0x40),
            ('freq-lock', 0x20),
            ('phase-lock', 0x10),
            ('loop-switching', 0x08),
            ('holdover', 0x04),
            ('active', 0x02),
            ('free-running', 0x01),
        ]
        read_reg(handle, address, status, 'dpll', 0x0D0A, bitfields)
        data = read_data(handle, address, 0x0D0B)
        status['dpll']['freq-clamped'] = (data & 0x80)>>7
        status['dpll']['history-avail'] = (data & 0x40)>>6
        status['dpll']['ref-priority'] = (data & 0x38)>>3
        ref = data & 0x03
        if data == 0:
            ref = "A"
        if data == 1:
            ref = "AA"
        if data == 2:
            ref = "B"
        if data == 3:
            ref = "BB"
        if data == 4:
            ref = "C"
        if data == 5:
            ref = "CC"
        if data == 6:
            ref = "D"
        if data == 7:
            ref = "DD"
        status['dpll']['reference'] = ref
    if args.ref:
        base = 0x0D0C
        for ref in ['a','aa','b','bb','c','cc','d','dd']:
            status['ref-{}'.format(ref)] = {}
            data = read_data(handle, address, base)
            status['ref-{}'.format(ref)]['profile-selected'] = (data & 0x80)>>7
            status['ref-{}'.format(ref)]['selected-profile'] = (data & 0x70)>>4
            status['ref-{}'.format(ref)]['valid'] = (data & 0x08)>>3
            status['ref-{}'.format(ref)]['fault'] = (data & 0x04)>>2
            status['ref-{}'.format(ref)]['fast'] = (data & 0x02)>>1
            status['ref-{}'.format(ref)]['slow'] = (data & 0x01)
            base += 1
    if args.watchdog:
        status['watchdog'] = {}
        count = read_data(handle, address, 0x0211)
        count += read_data(handle, address, 0x0212) << 8
    if args.irq:
        status['irq'] = {}
        bitfields = [
            ('unlocked', 0x20),
            ('locked', 0x10),
            ('cal-complete', 0x02),
            ('cal-started', 0x01),
        ]
        read_reg(handle, address, status['irq'], 'sysclk', 0x0D02, bitfields)
        bitfields = [
            ('sync', 0x08),
            ('watchdog', 0x04),
            ('eeprom-fault', 0x02),
            ('eeprom-complete', 0x01),
        ]
        read_reg(handle, address, status['irq'], 'distrib', 0x0D03, bitfields)
        bitfields = [
            ('switching', 0x80),
            ('closed', 0x40),
            ('free-run', 0x20),
            ('holdover', 0x10),
            ('freq-unlocked', 0x08),
            ('freq-locked', 0x04),
            ('phase-unlocked', 0x02),
            ('phase-locked', 0x01),
        ]
        read_reg(handle, address, status['irq'], 'dpll', 0x0D04, bitfields)
        bitfields = [
            ('updated', 0x10),
            ('freq-unclamped', 0x08),
            ('freq-clamped', 0x04),
            ('phase-slew-unlimited', 0x02),
            ('phase-slew-limited', 0x01),
        ]
        read_reg(handle, address, status['irq'], 'history', 0x0D05, bitfields)
        base = 0x0D06
        for c in ['a','b','c','d']:
            bitfields = [
                ('{}{}-new-profile'.format(c), 0x80),
                ('{}{}-validated'.format(c), 0x40),
                ('{}{}-fault-cleared'.format(c), 0x20),
                ('{}{}-fault'.format(c), 0x10),
                ('{}-new-profile'.format(c), 0x08),
                ('{}-validated'.format(c), 0x04),
                ('{}-fault-cleared'.format(c), 0x02),
                ('{}-fault'.format(c), 0x01),
            ]
            base += 1
            read_reg(handle, address, status['irq'], 'ref-input', base, bitfields)
        read_reg(handle, address, status['irq'], 'ref-input', 0x0D09, bitfields)
    pprint(status)
    
if __name__ == "__main__":
    main(sys.argv[1:])
