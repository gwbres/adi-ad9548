#! /usr/bin/env python3
#################################################################
# Guillaume W. Bres, 2022          <guillaume.bressaix@gmail.com>
#################################################################
# status.py
# small script to quickly monitor an AD9547,48 
#################################################################
import sys
import math
import argparse
from smbus import SMBus
from pprint import pprint

def read_data (handle, dev, addr):
    msb = (addr & 0xFF00)>>8
    lsb = addr & 0xFF
    handle.write_i2c_block_data(dev, msb, [lsb])
    data = handle.read_byte(dev)
    return data
def bitfield (data, mask):
    return int((data & mask) >> int(math.log2(mask))) 

def main (argv):
    parser = argparse.ArgumentParser(description="AD9547/48 status reporting")
    parser.add_argument(
        "bus",
        help="I2C bus",
    )
    parser.add_argument(
        "address",
        help="I2C slv address",
    )
    flags = [
        ("info",    "Device general infos (SN#, ..)"),
        ("serial",  "Serial port status (I2C/SPI)"),
        ("sysclk",  "Sys clock (pll and other infos)"),
        ("dpll",    "Digital pll status"),
        ("input",   "Input ref. status"),
        ('tuning',  "Current DDS freq. tuning word generated by history logic"),
        ("mx-pins", "Mx programmable pins infos"),
        ("irq",     "IRQ status"),
        ("watchdog","Watchdog timer current reading"),
    ]
    for (flag, helper) in flags:
        _helper = helper if helper is not None else "Report {} Status".format(flag.upper())
        parser.add_argument(
            "--{}".format(flag), 
            action="store_true",
            help=_helper,
        )
    args = parser.parse_args(argv)

    # open device
    handle = SMBus()
    handle.open(int(args.bus))
    address = int(args.address, 16)

    enabled = {
        0: 'disabled',
        1: 'enabled',
    }
    disabled = {
        0: 'enabled',
        1: 'disabled',
    }
    loop_filter_ext = {
        0: 'internal',
        1: 'external',
    }
    auto = {
        0: 'auto',
        1: 'manual',
    }
    cpump_currents = {
        '125uA': 0;
        '250uA': 1,
        '375uA': 2,
        '500uA': 3,
        '625uA': 4,
        '750uA': 5,
        '875uA': 6,
        '1mA': 7,
    }
    lock_det_depths = {
        0: 128,
        1: 256,
        2: 512,
        3: 1024,
    }
    sysclk_sources = {
        0: 'crystal',
        1: 'direct low freq',
        2: 'direct high freq',
        3: 'rx power down',
    }

    status = {}
    if args.info:
        status['info'] = {}
        status['info']['rev'] = hex(read_data(handle, address, 0x0002))
        status['info']['id']  = hex(read_data(handle, address, 0x0003))
    if args.serial:
        status['serial'] = {}
        status['serial']['spi'] = {}
        r = read_data(handle, address, 0x0000)
        status['serial']['spi']['unidirectionnal'] = bool((r&0x80)>>7)
        status['serial']['spi']['lsbf'] = bool((r&0x40)>>6)
        status['serial']['spi']['long'] = bool((r&0x20)>>4)
        status['serial']['readback'] = {}
        r = read_data(handle, address, 0x0004)
        status['serial']['readback']['registered'] = bool(r&0x01)
        r = read_data(handle, address, 0x0D00)
        status['serial']['readback']['fault-detected'] = bool((r&0x04)>>2)
        status['serial']['readback']['loading'] = bool((r&0x02)>>1)
        status['serial']['readback']['saving'] = bool(r&0x01)
    if args.sysclk:
        status['sysclk'] = {}
        r = read_data(handle, address, 0x0100)
        status['sysclk']['loop-filter'] = loop_filter_ext((r & 0x80)>>7)
        status['sysclk']['charge-pump'] = (r & 0x40)>>6
        status['sysclk']['charge-pump-current'] = cpump_currents[(r & 0x38)>>3
        status['sysclk']['lock-detect-timer'] = disabled[(r & 0x04)>>2]
        status['sysclk']['lock-detect-depth'] = lock_det_depths[r & 0x03]
        status['sysclk']['fb-n-divider'] = read_data(handle, address, 0x0101)

        r = read_data(handle, address, 0x0102)
        status['sysclk']['m-div-reset'] = bool((r & 0x40)>>6) 
        status['sysclk']['m-div'] = int(pow(2,(r & 0x30)>>4))
        status['sysclk']['freq-doubler'] = enabled[(r & 0x08)>>3]
        status['sysclk']['pll'] = enabled[(r & 0x04)>>2]
        status['sysclk']['source'] = sysclk_sources[r & 0x03]
         
        period = read_data(handle, address, 0x0103)
        period += read_data(handle, address, 0x0104) << 8
        period += (read_data(handle, address, 0x0105) & 0x0F) << 16
        status['sysclk']['freq'] = 1.0/(period *pow(10,-15)) # fs

        period = read_data(handle, address, 0x0106)
        period += read_data(handle, address, 0x0107) << 8
        period += (read_data(handle, address, 0x0108) & 0x0F) << 16
        status['sysclk']['stability'] = period *pow(10,-3)) # ms

        r = read_data(handle, address, 0x0D01)
        status['sysclk']['stable'] = bool((r&0x10)>>4)
        status['sysclk']['calibrating'] = bool((r&0x02)>>1)
        status['sysclk']['locked'] = bool(r&0x01)

    if args.mx_pins: 
        base = 0x0200
        status['mx-pin'] = {}
        for i in range (8):
            data = read_data(handle, address, base) 
            status['mx-pin']['m{}'.format(i)] = {}
            status['mx-pin']['m{}'.format(i)]['output'] = (data & 0x80)>>7
            status['mx-pin']['m{}'.format(i)]['function'] = data & 0x7F
            base += 1
    if args.dpll:
        bitfields = [
            ('offset-slew-limiting', 0x80),
            ('phase-buildout', 0x40),
            ('freq-lock', 0x20),
            ('phase-lock', 0x10),
            ('loop-switching', 0x08),
            ('holdover', 0x04),
            ('active', 0x02),
            ('free-running', 0x01),
        ]
        read_reg(handle, address, status, 'dpll', 0x0D0A, bitfields)
        data = read_data(handle, address, 0x0D0B)
        status['dpll']['freq-clamped'] = (data & 0x80)>>7
        status['dpll']['history-avail'] = (data & 0x40)>>6
        status['dpll']['ref-priority'] = (data & 0x38)>>3
        ref = data & 0x03
        if data == 0:
            ref = "A"
        if data == 1:
            ref = "AA"
        if data == 2:
            ref = "B"
        if data == 3:
            ref = "BB"
        if data == 4:
            ref = "C"
        if data == 5:
            ref = "CC"
        if data == 6:
            ref = "D"
        if data == 7:
            ref = "DD"
        status['dpll']['reference'] = ref
    if args.ref:
        base = 0x0D0C
        for ref in ['a','aa','b','bb','c','cc','d','dd']:
            status['ref-{}'.format(ref)] = {}
            data = read_data(handle, address, base)
            status['ref-{}'.format(ref)]['profile-selected'] = (data & 0x80)>>7
            status['ref-{}'.format(ref)]['selected-profile'] = (data & 0x70)>>4
            status['ref-{}'.format(ref)]['valid'] = (data & 0x08)>>3
            status['ref-{}'.format(ref)]['fault'] = (data & 0x04)>>2
            status['ref-{}'.format(ref)]['fast'] = (data & 0x02)>>1
            status['ref-{}'.format(ref)]['slow'] = (data & 0x01)
            base += 1
    if args.watchdog:
        status['watchdog'] = {}
        count = read_data(handle, address, 0x0211)
        count += read_data(handle, address, 0x0212) << 8
    if args.tuning:
        tuning = read_data(handle, address, 0x0D14)
        tuning += read_data(handle, address, 0x0D15) << 8
        tuning += read_data(handle, address, 0x0D16) << 16
        tuning += read_data(handle, address, 0x0D17) << 24
        tuning += read_data(handle, address, 0x0D18) << 32
        tuning += read_data(handle, address, 0x0D19) << 40
        status['tuning'] = tuning

    if args.irq:
        status['irq'] = {}
        for category in ['sysclk','distrib','eeprom','dpll','watchdog']:
            status['irq'][category] = {}
        
        r = read_data(handle, address, 0x0D02)
        status['irq']['sysclk']['unlocked'] = bool((r & 0x20)>>5)
        status['irq']['sysclk']['locked'] = bool((r & 0x10)>>4)
        status['irq']['sysclk']['calibration'] = {}
        status['irq']['sysclk']['calibration']['done'] = bool((r & 0x02)>>1)
        status['irq']['sysclk']['calibration']['started'] = bool(r & 0x01)
        
        r = read_data(handle, address, 0x0D03)
        status['irq']['distrib']['sync'] = bool((r & 0x08)>>3)
        status['irq']['watchdog']['expired'] = bool((r & 0x04)>>2)
        status['irq']['eeprom']['fault'] = bool((r & 0x02)>>1)
        status['irq']['eeprom']['complete'] = bool((r & 0x01)>>0)
        
        r = read_data(handle, address, 0x0D04)
        status['irq']['dpll']['switching-ref'] = bool((r & 0x80)>>7)
        status['irq']['dpll']['closed-loop'] = bool((r & 0x40)>>6)
        status['irq']['dpll']['free-run'] = bool((r & 0x20)>>5)
        status['irq']['dpll']['holdover'] = bool((r & 0x10)>>4)
        status['irq']['dpll']['freq'] = {}
        status['irq']['dpll']['freq']['unlocked'] = bool((r & 0x08)>>3)
        status['irq']['dpll']['freq']['locked'] = bool((r & 0x04)>>2)
        status['irq']['dpll']['phase'] = {}
        status['irq']['dpll']['phase']['unlocked'] = bool((r & 0x02)>>1)
        status['irq']['dpll']['phase']['locked'] = bool((r & 0x01)>>0)
        
        bitfields = [
            ('updated', 0x10),
            ('freq-unclamped', 0x08),
            ('freq-clamped', 0x04),
            ('phase-slew-unlimited', 0x02),
            ('phase-slew-limited', 0x01),
        ]
        read_reg(handle, address, status['irq'], 'history', 0x0D05, bitfields)
        base = 0x0D06
        for c in ['a','b','c','d']:
            bitfields = [
                ('{}{}-new-profile'.format(c), 0x80),
                ('{}{}-validated'.format(c), 0x40),
                ('{}{}-fault-cleared'.format(c), 0x20),
                ('{}{}-fault'.format(c), 0x10),
                ('{}-new-profile'.format(c), 0x08),
                ('{}-validated'.format(c), 0x04),
                ('{}-fault-cleared'.format(c), 0x02),
                ('{}-fault'.format(c), 0x01),
            ]
            base += 1
            read_reg(handle, address, status['irq'], 'ref-input', base, bitfields)
        read_reg(handle, address, status['irq'], 'ref-input', 0x0D09, bitfields)
    pprint(status)
    
if __name__ == "__main__":
    main(sys.argv[1:])
